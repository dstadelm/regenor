{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "memory_layout": {
      "type": "object",
      "title": "Memory Layout",
      "description": "Defines the layout of the memory and width of registers",
      "required": [
        "bank",
        "register"
      ],
      "properties": {
        "base_address": {
          "type": "integer",
          "title": "Base Address",
          "description": "Defines the address at which the register space starts.",
          "minimum": 0
        },
        "bank": {
          "type": "object",
          "title": "Bank",
          "description": "A bank is defined by the maximum number of registers that can reside in a bank. The bank is used to introduce a level of pipelining.",
          "properties": {
            "registers": {
              "title": "Registers per bank",
              "description": "This defines the maximum number of registers that reside in the bank.",
              "type": "integer",
              "minimum": 0
            }
          },
          "required": [
            "registers"
          ]
        },
        "register": {
          "type": "object",
          "title": "Register",
          "description": "Defines the layout of a register",
          "properties": {
            "bit": {
              "title": "Register bit width",
              "description": "Defines the number of bits a register contains.",
              "type": "integer",
              "minimum": 0
            }
          },
          "required": [
            "bit"
          ]
        }
      }
    },
    "anchors": {
      "type": "array",
      "items": {},
      "title": "Anchros",
      "description": "Collection for referencable anchors in YAML."
    },
    "group": {
      "$ref": "#/$defs/group"
    },
    "array": {
      "$ref": "#/$defs/array"
    },
    "signed": {
      "$ref": "#/$defs/signed"
    },
    "unsigned": {
      "$ref": "#/$defs/unsigned"
    },
    "bit_vector": {
      "$ref": "#/$defs/bit_vector"
    },
    "bit": {
      "$ref": "#/$defs/bit"
    }
  },
  "unevaluatedProperties": false,
  "$defs": {
    "group": {
      "type": "object",
      "title": "Group",
      "description": "A collection of subelements (group, array, unsigned, signed, bit_vector and bit)",
      "allOf": [
        {
          "$ref": "#/$defs/composite_properties"
        },
        {
          "$ref": "#/$defs/comon_properties"
        }
      ],
      "properties": {
        "instance_name": { "$ref": "#/$defs/instance_name"},
        "elements": {
          "type": "array",
          "items": {
            "anyOf":[
              {
                "type": "object",
                "properties": {
                  "group": {
                    "$ref": "#/$defs/group"
                  },
                  "array": {
                    "$ref": "#/$defs/array"
                  },
                  "signed": {
                    "$ref": "#/$defs/signed",
                    "required": ["instance_name", "format"]
                  },
                  "unsigned": {
                    "$ref": "#/$defs/unsigned",
                    "required": ["instance_name", "format"]

                  },
                  "bit_vector": {
                    "$ref": "#/$defs/bit_vector",
                    "required": ["instance_name", "width"]
                  },
                  "bit": {
                    "$ref": "#/$defs/bit",
                    "required": ["instance_name"]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "pattern": ".*\\.[(yaml)|(yml)]"
              }
            ]
          },
          "additionalItems": false
        }
      },
      "unevaluatedProperties": false,
      "required": [
        "instance_name",
        "elements"
      ]
    },
    "array": {
      "title": "Array",
      "description": "An array of one type of any element (array, group, signed, unsigned, bit, bit_vector)",
      "type": "object",
      "anyOf": [
        {
          "$ref": "#/$defs/composite_properties"
        },
        {
          "$ref": "#/$defs/comon_properties"
        }
      ],
      "properties": {
        "instance_name": { "$ref": "#/$defs/instance_name"},
        "array_index": {
          "type": "string",
          "title": "Array Index",
          "description": "Optional value defining the index of the array. The index can be used to set default values by using formulas in the leaf elements."
        },
        "array_length": {
          "type": "integer",
          "title": "Array Lendth",
          "description": "Mandatory value defining the lendth of the array."
        },
        "element": {
          "oneOf": [
            {
              "type": "object",
              "oneOf": [
                {
                  "properties": {
                    "group": {
                      "$ref": "#/$defs/group"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "group"
                  ]
                },
                {
                  "properties": {
                    "array": {
                      "$ref": "#/$defs/array"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "array"
                  ]
                },
                {
                  "properties": {
                    "signed": {
                      "$ref": "#/$defs/signed"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "signed"
                  ]
                },
                {
                  "properties": {
                    "unsigned": {
                      "$ref": "#/$defs/unsigned"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "unsigned"
                  ]
                },
                {
                  "properties": {
                    "bit_vector": {
                      "$ref": "#/$defs/bit_vector"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "bit_vector"
                  ]
                },
                {
                  "properties": {
                    "bit": {
                      "$ref": "#/$defs/bit"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "bit"
                  ]
                }
              ],
              "unevaluatedProperties": false
            },
            {
              "type": "string",
              "pattern": ".*\\.[(yaml)|(yml)]"
            }
          ],

          "unevaluatedProperties": false
        }
      },
      "required": [
        "instance_name",
        "array_length",
        "element"
      ]
    },
    "signed": {
      "allOf": [
        {
          "$ref": "#/$defs/number_values"
        }
      ],
      "properties": {
        "format": { "$ref": "#/$defs/format" },
        "instance_name": { "$ref": "#/$defs/leaf_instance_name"}
      },
      "title": "Signed",
      "description": "Signed fixpoint value",
      "required": [
        "format"
      ]
    },
    "unsigned": {
      "allOf": [
        {
          "$ref": "#/$defs/number_values"
        }
      ],
      "properties": {
        "format": { "$ref": "#/$defs/format" },
        "instance_name": { "$ref": "#/$defs/leaf_instance_name"}
      },
      "title": "Unsigned",
      "description": "Unsigned fixpoint value",
      "required": [
        "format"
      ]
    },
    "number_values": {
      "type": "object",
      "unevaluatedProperties": false,
      "anyOf": [
        {
          "$ref": "#/$defs/comon_properties"
        }
      ],
      "properties": {
        "default": {
          "type": "number",
          "title": "Default",
          "description": "[0] The default value as a number"
        }
      },
      "required": [
        "format"
      ]
    },
    "bit_vector": {
      "type": "object",
      "unevaluatedProperties": false,
      "anyOf": [
        {
          "$ref": "#/$defs/comon_properties"
        }
      ],
      "properties": {
        "instance_name": { "$ref": "#/$defs/leaf_instance_name"},
        "width": {
          "type": "integer",
          "minimum": 1,
          "title": "Vector width",
          "description": "Defines the number of bits of the vector."
        },
        "default": {
          "type": "integer",
          "title": "Default",
          "description": "[0] The default value as a number, hex values are allowed."
        }
      },
      "title": "Bit Vector",
      "description": "Non numeric bit vector",
      "required": [
        "width"
      ]
    },
    "bit": {
      "unevaluatedProperties": false,
      "anyOf": [
        {
          "$ref": "#/$defs/comon_properties"
        }
      ],
      "properties": {
        "instance_name": { "$ref": "#/$defs/leaf_instance_name"},
        "default": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1,
          "title": "Default",
          "default": 1,
          "description": "[0] The default value a 0 or 1."
        }
      },
      "title": "Bit",
      "description": "Single bit field"
    },
    "comon_properties": {
      "properties": {
        "module": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Module Name",
              "description": "[\"instance_name\"] The name of the module, if ommited the instance name is used"
            },
            "virtual": {
              "type": "boolean",
              "default": "true",
              "title": "Virtual Module",
              "description": "If defined virtual the module will only be used for documentation purposes, no actual implementation will be made for HDL. This allowes to include third party elements to be documented in the ICD in the same manner as self developed ones."
            }
          },
          "additioinalProperties": false,
          "title": "Module identifier",
          "description": "If this element is present all subelements shall be grouped as a module."
        },
        "instance_name": { "$ref": "#/$defs/instance_name"},
        "offset": {
          "type": "integer",
          "title": "offset",
          "description": "[0] Defines the address offset of any element. the offset is cumulative, meaning that if there is a nother offset in the branch of the tree the offsets are accumulated."
        },
        "description": {
          "type": "string",
          "title": "description",
          "description": "[\"\"] The description of the element."
        },
        "permission": {
          "enum": [
            "r",
            "w",
            "rw"
          ],
          "title": "permission attribute",
          "description": "[\"rw\"] Can be one of \"r\" (read), \"w\" (write) or \"rw\" (read and write)."
        },
        "readback": {
          "type": "boolean",
          "title": "readback",
          "description": "[true] The internal behaviour of the value read from the register. if set to false the value read is not the value written to the register."
        },
        "sticky": {
              "enum": [
                "none",
                "clear_on_read",
                "clear_on_write",
                "clear_on_read_and_write"
              ],
          "title": "sticky",
          "description": "The presence of this element makes the subelements sticky, the value defines how the bit(s) shall be cleared"
        }
      }
    },
    "type_name": {
      "type": "string",
      "title": "type name",
      "description": "[\"instance_name\"] The type name must be unique within a namespace. If an element is reused or redefined with the same type name, the structure of that element has to be congruent. The criteria for congruency is that all subelements have equal instance names, type names and namespaces"
    },
    "instance_name": {
      "type": "string",
      "title": "instance name",
      "description": "The instance name is the name given to identify it in the instantiation tree. The type name is inherited from the instance name. However the type name can also be set explicitly using type_name."
    },
    "leaf_instance_name": {
      "type": "string",
      "title": "instance name",
      "description": "The instance name is the name given to identify it in the instantiation tree."
    },
    "format": {
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+",
      "title": "Format",
      "description": "Defines the format as <bits integer part>.<bits fractional part>",
      "default": "\"x.y\""
    },
    "composite_properties": {
      "properties": {
        "namespace": {
          "type": "string",
          "title": "namespace",
          "description": "Defines a root namespace. This can be used to determine packages or include files that accomodate declarations reused in multiple modules."
        },
        "nested_namespace": {
          "type": "string",
          "title": "nested namespace",
          "description": "Namespace within the sourrounding namespace"
        }
      }
    }
  }
}
